 

1. The plan to resolve the issue is as follows:
   - First, we need to identify the method `SaveProfile` which is reported to have high cognitive complexity.
   - We will break down the method into smaller methods to reduce the cognitive complexity.
   - We will create a new method `ChangePassword` to handle the password change logic.
   - We will create a new method `ChangeRole` to handle the role change logic.
   - We will create a new method `UpdateUser` to handle the user update logic.
   - We will call these new methods from `SaveProfile`.

2. The modified source code is as follows:

```cs
        public async Task<IActionResult> SaveProfile(AccountSettingsModel model)
        {
            GetRoles();
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                _mapper.AccountSettingsModelToApplicationUser(model, user);

                if (!string.IsNullOrEmpty(model.OldPassword)
                    || !string.IsNullOrEmpty(model.NewPassword)
                    || !string.IsNullOrEmpty(model.NewPasswordConfirmation))
                {
                    if (!ChangePassword(user, model.OldPassword ?? "", model.NewPassword ?? ""))
                    {
                        ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
                        return View("Settings", model);
                    }
                }

                if (!ChangeRole(user, model.RoleId))
                {
                    ModelState.AddModelError("Role", "Failed to change role");
                    return View("Settings", model);
                }

                if (!UpdateUser(user))
                {
                    ModelState.AddModelError("Update", "Failed to update user");
                    return View("Settings", model);
                }

                await HttpContext.RefreshLoginAsync();

                if (User.IsInRole("Admin"))
                {
                    return RedirectToAction("Profile", new { userId = user.Id });
                }
                return RedirectToAction("Profile");
            }
            return View("Settings", model);
        }

        private bool ChangePassword(ApplicationUser user, string oldPassword, string newPassword)
        {
            var result = _userManager.ChangePasswordAsync(user, oldPassword, newPassword).Result;
            return result.Succeeded;
        }

        private bool ChangeRole(ApplicationUser user, string roleId)
        {
            var role = _roleManager.Roles.First(r => r.Id == roleId).Name;
            var userRole = _userManager.GetRolesAsync(user).Result.FirstOrDefault();
            if (role != userRole)
            {
                _userManager.RemoveFromRoleAsync(user, userRole).Wait();
                _userManager.AddToRoleAsync(user, role).Wait();
            }
            return true;
        }

        private bool UpdateUser(ApplicationUser user)
        {
            _userManager.UpdateAsync(user).Wait();
            return true;
        }
```

3. The failure conditions are as follows:
   - The new methods `ChangePassword`, `ChangeRole` and `UpdateUser` are called from `SaveProfile`.
   - The new methods `ChangePassword`, `ChangeRole` and `UpdateUser` are not fail to fully resolve the issue.
   - No related changes are made to code, data or comments not related to the issue.
   - No code, data or comments are replaced by placeholders.
   - The modified source code is compatible with all existing functionality.

APPROVE_CHANGES
