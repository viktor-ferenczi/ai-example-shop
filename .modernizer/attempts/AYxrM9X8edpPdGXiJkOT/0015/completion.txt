 

1. The plan for resolving the issue is as follows:
   - Identify the method `SaveProfile` which is causing the cognitive complexity issue.
   - Break down the method into smaller methods to reduce the complexity.
   - Extract the logic related to password change into a separate method.
   - Extract the logic related to role change into a separate method.
   - Extract the logic related to user update into a separate method.
   - Extract the logic related to user sign-out into a separate method.

2. The original source code is not provided in this context, but I can provide a modified version of it.

```cs
public async Task<IActionResult> SaveProfile(AccountSettingsModel model)
{
    GetRoles();
    if (ModelState.IsValid)
    {
        var user = await _userManager.FindByEmailAsync(model.Email);
        _mapper.AccountSettingsModelToApplicationUser(model, user);

        if (!string.IsNullOrEmpty(model.OldPassword)
            || !string.IsNullOrEmpty(model.NewPassword)
            || !string.IsNullOrEmpty(model.NewPasswordConfirmation))
        {
            await ChangePassword(model, user);
        }

        var role = _roleManager.Roles.First(r => r.Id == model.RoleId).Name;
        var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
        if (role != userRole)
        {
            await ChangeRole(user, role);
        }

        await UpdateUser(user);
        await HttpContext.RefreshLoginAsync();

        if (User.IsInRole("Admin"))
        {
            return RedirectToAction("Profile", new { userId = user.Id });
        }
        return RedirectToAction("Profile");
    }
    return View("Settings", model);
}

private async Task ChangePassword(AccountSettingsModel model, ApplicationUser user)
{
    if (string.IsNullOrEmpty(model.OldPassword))
    {
        ModelState.AddModelError("OldPassword", "Enter your current password to change it");
        return;
    }
    if (string.IsNullOrEmpty(model.NewPassword))
    {
        ModelState.AddModelError("NewPassword", "Enter your new password to change it");
        return;
    }

    var result = await _userManager.ChangePasswordAsync(user, model.OldPassword ?? "", model.NewPassword ?? "");
    if (!result.Succeeded)
    {
        ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
        return;
    }
}

private async Task ChangeRole(ApplicationUser user, string role)
{
    var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
    await _userManager.RemoveFromRoleAsync(user, userRole);
    await _userManager.AddToRoleAsync(user, role);
}

private async Task UpdateUser(ApplicationUser user)
{
    await _userManager.UpdateAsync(user);
}
```

APPROVE_CHANGES
