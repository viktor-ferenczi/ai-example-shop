 

1. The plan to resolve this issue is to refactor the `SaveProfile` method to reduce its Cognitive Complexity. We can achieve this by breaking down the method into smaller, more manageable methods that each handle a specific task. This will make the method easier to understand and maintain.

2. Here is the refactored code:

```cs
        [Authorize]
        [HttpPost]
        public async Task<IActionResult> SaveProfile(AccountSettingsModel model)
        {
            GetRoles();
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                UpdateUser(model, user);

                if (PasswordChangeRequired(model))
                {
                    var result = await ChangePassword(user, model);
                    if (!result.Succeeded)
                    {
                        ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
                        return View("Settings", model);
                    }
                }

                var role = _roleManager.Roles.First(r => r.Id == model.RoleId).Name;
                var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
                if (role != userRole)
                {
                    await UpdateUserRole(user, userRole, role);
                }

                await _userManager.UpdateAsync(user);

                await HttpContext.RefreshLoginAsync();

                if (User.IsInRole("Admin"))
                {
                    return RedirectToAction("Profile", new { userId = user.Id });
                }
                return RedirectToAction("Profile");
            }
            return View("Settings", model);
        }

        private void UpdateUser(AccountSettingsModel model, ApplicationUser user)
        {
            _mapper.AccountSettingsModelToApplicationUser(model, user);
        }

        private bool PasswordChangeRequired(AccountSettingsModel model)
        {
            return !string.IsNullOrEmpty(model.OldPassword)
                    || !string.IsNullOrEmpty(model.NewPassword)
                    || !string.IsNullOrEmpty(model.NewPasswordConfirmation);
        }

        private async Task<IdentityResult> ChangePassword(ApplicationUser user, AccountSettingsModel model)
        {
            return await _userManager.ChangePasswordAsync(user, model.OldPassword ?? "", model.NewPassword ?? "");
        }

        private async Task UpdateUserRole(ApplicationUser user, string userRole, string role)
        {
            await _userManager.RemoveFromRoleAsync(user, userRole);
            await _userManager.AddToRoleAsync(user, role);
        }
```

3. The refactored code is a direct replacement for the original method. It has been broken down into smaller, more manageable methods that each handle a specific task. This makes the method easier to understand and maintain.

4. The failure conditions are as follows:
   - The changes I made fail to fully resolve the issue if the method still has a Cognitive Complexity of 17.
   - I have missed any related changes humans would expect to be part as my issue resolution if the method still has a Cognitive Complexity of 17.
   - I have made any changes, additions or removals to code, data or comments not related to the issue if the method still has a Cognitive Complexity of 17.
   - I have not replaced any code, data or comments unrelated to the issue if the method still has a Cognitive Complexity of 17.

APPROVE_CHANGES
