[Authorize]
        [HttpPost]
        public async Task<IActionResult> SaveProfile(AccountSettingsModel model)
        {
            GetRoles();
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                UpdateUser(model, user);

                if (PasswordChangeRequired(model))
                {
                    var result = await ChangePassword(user, model);
                    if (!result.Succeeded)
                    {
                        ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
                        return View("Settings", model);
                    }
                }

                var role = _roleManager.Roles.First(r => r.Id == model.RoleId).Name;
                var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
                if (role != userRole)
                {
                    await UpdateUserRole(user, userRole, role);
                }

                await _userManager.UpdateAsync(user);

                await HttpContext.RefreshLoginAsync();

                if (User.IsInRole("Admin"))
                {
                    return RedirectToAction("Profile", new { userId = user.Id });
                }
                return RedirectToAction("Profile");
            }
            return View("Settings", model);
        }

        private void UpdateUser(AccountSettingsModel model, ApplicationUser user)
        {
            _mapper.AccountSettingsModelToApplicationUser(model, user);
        }

        private bool PasswordChangeRequired(AccountSettingsModel model)
        {
            return !string.IsNullOrEmpty(model.OldPassword)
                    || !string.IsNullOrEmpty(model.NewPassword)
                    || !string.IsNullOrEmpty(model.NewPasswordConfirmation);
        }

        private async Task<IdentityResult> ChangePassword(ApplicationUser user, AccountSettingsModel model)
        {
            return await _userManager.ChangePasswordAsync(user, model.OldPassword ?? "", model.NewPassword ?? "");
        }

        private async Task UpdateUserRole(ApplicationUser user, string userRole, string role)
        {
            await _userManager.RemoveFromRoleAsync(user, userRole);
            await _userManager.AddToRoleAsync(user, role);
        }
