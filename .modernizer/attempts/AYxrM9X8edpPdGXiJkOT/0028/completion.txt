 

1. I will first review the `SaveProfile` method and identify the parts of the code that could be simplified to reduce its cognitive complexity. 

2. I will then refactor the code by extracting the password change logic into a separate method. This will allow me to simplify the `SaveProfile` method and reduce its cognitive complexity.

3. Here is the refactored code:

```cs
[HttpPost]
[Authorize]
public async Task<IActionResult> SaveProfile(AccountSettingsModel model)
{
    GetRoles();
    if (ModelState.IsValid)
    {
        var user = await _userManager.FindByEmailAsync(model.Email);
        _mapper.AccountSettingsModelToApplicationUser(model, user);

        if (!string.IsNullOrEmpty(model.OldPassword)
            || !string.IsNullOrEmpty(model.NewPassword)
            || !string.IsNullOrEmpty(model.NewPasswordConfirmation))
        {
            if (string.IsNullOrEmpty(model.OldPassword))
            {
                ModelState.AddModelError("OldPassword", "Enter your current password to change it");
                return View("Settings", model);
            }
            if (string.IsNullOrEmpty(model.NewPassword))
            {
                ModelState.AddModelError("NewPassword", "Enter your new password to change it");
                return View("Settings", model);
            }

            await ChangePassword(user, model.OldPassword ?? "", model.NewPassword ?? "");
        }

        var role = _roleManager.Roles.First(r => r.Id == model.RoleId).Name;
        var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
        if (role != userRole)
        {
            await _userManager.RemoveFromRoleAsync(user, userRole);
            await _userManager.AddToRoleAsync(user, role);
        }

        await _userManager.UpdateAsync(user);

        await HttpContext.RefreshLoginAsync();

        if (User.IsInRole("Admin"))
        {
            return RedirectToAction("Profile", new { userId = user.Id });
        }
        return RedirectToAction("Profile");
    }
    return View("Settings", model);
}

private async Task ChangePassword(ApplicationUser user, string oldPassword, string newPassword)
{
    var result = await _userManager.ChangePasswordAsync(user, oldPassword, newPassword);
    if (!result.Succeeded)
    {
        ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
        throw new Exception("Password change failed");
    }
}
```

APPROVE_CHANGES
