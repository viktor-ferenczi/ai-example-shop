 

1. Here's the plan for resolving the issue:

   - The method `SaveProfile` is currently complex due to the multiple checks and operations it performs. We can refactor it to reduce its cognitive complexity.
   - We can start by extracting the password change logic into a separate method. This will make the `SaveProfile` method easier to read and understand.
   - Next, we can extract the role change logic into a separate method.
   - Finally, we can simplify the `ModelState.IsValid` check by extracting it into a separate method.

2. Here's the modified code:

```cs
public async Task<IActionResult> SaveProfile(AccountSettingsModel model)
{
    GetRoles();
    if (ModelState.IsValid)
    {
        var user = await _userManager.FindByEmailAsync(model.Email);
        _mapper.AccountSettingsModelToApplicationUser(model, user);

        ChangePassword(model, user);
        ChangeRole(model, user);

        await _userManager.UpdateAsync(user);

        await HttpContext.RefreshLoginAsync();

        if (User.IsInRole("Admin"))
        {
            return RedirectToAction("Profile", new { userId = user.Id });
        }
        return RedirectToAction("Profile");
    }
    return View("Settings", model);
}

private void ChangePassword(AccountSettingsModel model, ApplicationUser user)
{
    if (!string.IsNullOrEmpty(model.OldPassword)
        || !string.IsNullOrEmpty(model.NewPassword)
        || !string.IsNullOrEmpty(model.NewPasswordConfirmation))
    {
        if (string.IsNullOrEmpty(model.OldPassword))
        {
            ModelState.AddModelError("OldPassword", "Enter your current password to change it");
            return;
        }
        if (string.IsNullOrEmpty(model.NewPassword))
        {
            ModelState.AddModelError("NewPassword", "Enter your new password to change it");
            return;
        }

        var result = _userManager.ChangePasswordAsync(user, model.OldPassword ?? "", model.NewPassword ?? "").Result;
        if (!result.Succeeded)
        {
            ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
            return;
        }
    }
}

private async Task ChangeRole(AccountSettingsModel model, ApplicationUser user)
{
    var role = _roleManager.Roles.First(r => r.Id == model.RoleId).Name;
    var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
    if (role != userRole)
    {
        await _userManager.RemoveFromRoleAsync(user, userRole);
        await _userManager.AddToRoleAsync(user, role);
    }
}
```

3. Here are the failure conditions to check:

   - The `SaveProfile` method should now have a cognitive complexity of 15, not 17.
   - The `ChangePassword` and `ChangeRole` methods should be extracted from the `SaveProfile` method.
   - The `ChangePassword` and `ChangeRole` methods should not have any cognitive complexity greater than 10.
   - The `ChangePassword` and `ChangeRole` methods should not have any nested conditionals.
   - The `ChangePassword` and `ChangeRole` methods should not have any duplicate code with the `SaveProfile` method.
   - The `ChangePassword` and `ChangeRole` methods should not have any code that is not related to the issue.
   - The `ChangePassword` and `ChangeRole` methods should not have any changes to code, data, or comments unrelated to the issue.
   - The `ChangePassword` and `ChangeRole` methods should not have any placeholders in the code.

If all these conditions are met, I will approve the changes by saying "APPROVE_CHANGES".
