string roleId;
   var role = _roleManager.Roles.FirstOrDefault(role => role.Name == roleName);
   if (role != null)
   {
       roleId = role.Id;
   }
   else
   {
       // Handle the scenario where the role does not exist
       // This could be as simple as throwing an exception or a more complex handling
   }
   ```

2. Here is the modified source code:

   ```cs
   // TOP-MARKER
   using System.Reflection.Metadata;
   using Microsoft.AspNetCore.Authorization;
   using Microsoft.AspNetCore.Identity;
   using Microsoft.AspNetCore.Mvc;
   using Microsoft.AspNetCore.Mvc.Rendering;
   using Shop.Data;
   using Shop.Data.Extensions;
   using Shop.Data.Models;
   using Shop.Web.DataMapper;
   using Shop.Web.Models.Account;
   using System.Collections.Generic;
   using System.Linq;
   using System.Text.RegularExpressions;
   using System.Threading.Tasks;

   namespace Shop.Web.Controllers
   {
       public class AccountController : Controller
       {
           // ...

           private async Task<IActionResult> Settings(AccountSettingsModel model)
           {
               GetRoles();
               if (ModelState.IsValid)
               {
                   var user = await _userManager.FindByEmailAsync(model.Email);
                   _mapper.AccountSettingsModelToApplicationUser(model, user);

                   if (!string.IsNullOrEmpty(model.OldPassword)
                       || !string.IsNullOrEmpty(model.NewPassword)
                       || !string.IsNullOrEmpty(model.NewPasswordConfirmation))
                   {
                       if (string.IsNullOrEmpty(model.OldPassword))
                       {
                           ModelState.AddModelError("OldPassword", "Enter your current password to change it");
                           return View("Settings", model);
                       }
                       if (string.IsNullOrEmpty(model.NewPassword))
                       {
                           ModelState.AddModelError("NewPassword", "Enter your new password to change it");
                           return View("Settings", model);
                       }

                       var result = await _userManager.ChangePasswordAsync(user, model.OldPassword ?? "", model.NewPassword ?? "");
                       if (!result.Succeeded)
                       {
                           ModelState.AddModelError("OldPassword", "Incorrect password, please enter your current password to change it");
                           return View("Settings", model);
                       }
                   }

                   var role = _roleManager.Roles.FirstOrDefault(r => r.Name == model.Role);
                   if (role != null)
                   {
                       var userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
                       if (role.Name != userRole)
                       {
                           await _userManager.RemoveFromRoleAsync(user, userRole);
                           await _userManager.AddToRoleAsync(user, role.Name);
                       }
                   }
                   else
                   {
                       // Handle the scenario where the role does not exist
                       // This could be as simple as throwing an exception or a more complex handling
                   }

                   await _userManager.UpdateAsync(user);

                   await HttpContext.RefreshLoginAsync();

                   if (User.IsInRole("Admin"))
                   {
                       return RedirectToAction("Profile", new { userId = user.Id });
                   }
                   return RedirectToAction("Profile");
               }
               return View("Settings", model);
           }

           // ...
       }
   }
   