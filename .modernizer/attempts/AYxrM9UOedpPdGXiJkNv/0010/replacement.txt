using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Shop.Data.Models
{
    public class ShoppingCart
    {
        // ...

        //TODO design issue: returning bool, but no additional info if amount is invalid. View decides what error message to show
        //TODO this is supposed to be application- or domain-level logic
        //TODO too much branching
        public bool AddToCart(Food food, int amount)
        {
            if (food.InStock == 0 || amount == 0)
            {
                return false;
            }

            var shoppingCartItem = _context.ShoppingCartItems.SingleOrDefault(
                s => s.Food.Id == food.Id && s.ShoppingCartId == Id);
            var isValidAmount = true;
            if (shoppingCartItem == null)
            {
                if (amount > food.InStock)
                {
                    isValidAmount = false;
                }
                shoppingCartItem = new ShoppingCartItem
                {
                    ShoppingCartId = Id,
                    Food = food,
                    Amount = Math.Min(food.InStock, amount)
                };
                _context.ShoppingCartItems.Add(shoppingCartItem);
            }
            else
            {
                isValidAmount = UpdateShoppingCartItem(shoppingCartItem, food, amount);
            }

            _context.SaveChanges();
            return isValidAmount;
        }

        private bool UpdateShoppingCartItem(ShoppingCartItem shoppingCartItem, Food food, int amount)
        {
            if (food.InStock - shoppingCartItem.Amount - amount >= 0)
            {
                shoppingCartItem.Amount += amount;
                return true;
            }
            else
            {
                shoppingCartItem.Amount += food.InStock - shoppingCartItem.Amount;
                return false;
            }
        }

        // ...
    }
}
