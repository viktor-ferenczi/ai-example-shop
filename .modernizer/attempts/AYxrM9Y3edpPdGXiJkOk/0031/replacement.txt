private IEnumerable<Order> SetOrderBy(IEnumerable<Order> orders, OrderBy orderBy)
{
    switch (orderBy)
    {
        case OrderBy.DateDesc:
            orders = orders.OrderByDescending(order => order.OrderPlaced);
            break;
        case OrderBy.DateAsc:
            orders = orders.OrderBy(order => order.OrderPlaced);
            break;
        case OrderBy.PriceAsc:
            orders = orders.OrderBy(order => order.OrderTotal);
            break;
        case OrderBy.PriceDesc:
            orders = orders.OrderByDescending(order => order.OrderTotal);
            break;
        default: throw new NotImplementedException();
    }
    return orders;
}

public IEnumerable<Order> GetFilteredOrders(
    string userId,
    OrderBy orderBy = OrderBy.None,
    int offset = 0, int limit = 10,
    decimal? minimalPrice = null,
    decimal? maximalPrice = null,
    DateTime? minDate = null,
    DateTime? maxDate = null,
    string zipCode = null)
{
    var orders = string.IsNullOrEmpty(userId) ? GetAll() : GetByUserId(userId);

    if (orderBy != OrderBy.None)
    {
        orders = SetOrderBy(orders, orderBy);
    }

    // Rest of the method...
}
