private void SetOrderBy(ref IEnumerable<Order> orders, OrderBy orderBy)
{
    switch (orderBy)
    {
        case OrderBy.DateDesc:
            orders = orders.OrderByDescending(order => order.OrderPlaced);
            break;
        case OrderBy.DateAsc:
            orders = orders.OrderBy(order => order.OrderPlaced);
            break;
        case OrderBy.PriceAsc:
            orders = orders.OrderBy(order => order.OrderTotal);
            break;
        case OrderBy.PriceDesc:
            orders = orders.OrderByDescending(order => order.OrderTotal);
            break;
        default: throw new NotImplementedException();
    }
}
```

3. Here's the modified source code:

```cs
// TOP-MARKER
using Microsoft.EntityFrameworkCore;
using Shop.Data;
using Shop.Data.Enums;
using Shop.Data.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Shop.Service
{
    public class OrderService : IOrder
    {
        // ...

        private void SetOrderBy(ref IEnumerable<Order> orders, OrderBy orderBy)
        {
            switch (orderBy)
            {
                case OrderBy.DateDesc:
                    orders = orders.OrderByDescending(order => order.OrderPlaced);
                    break;
                case OrderBy.DateAsc:
                    orders = orders.OrderBy(order => order.OrderPlaced);
                    break;
                case OrderBy.PriceAsc:
                    orders = orders.OrderBy(order => order.OrderTotal);
                    break;
                case OrderBy.PriceDesc:
                    orders = orders.OrderByDescending(order => order.OrderTotal);
                    break;
                default: throw new NotImplementedException();
            }
        }

        // ...
    }
}
