 The issue is related to the `SetOrderBy` method where the `orders` variable is being reassigned within the switch statement, but this reassignment is not being returned. This is a bug because the `orders` variable is a local reference and any changes made to it within the method will not be reflected outside of the method.

Here is the corrected code:

```cs
private IEnumerable<Order> SetOrderBy(IEnumerable<Order> orders, OrderBy orderBy)
{
    switch (orderBy)
    {
        case OrderBy.DateDesc:
            orders = orders.OrderByDescending(order => order.OrderPlaced);
            break;
        case OrderBy.DateAsc:
            orders = orders.OrderBy(order => order.OrderPlaced);
            break;
        case OrderBy.PriceAsc:
            orders = orders.OrderBy(order => order.OrderTotal);
            break;
        case OrderBy.PriceDesc:
            orders = orders.OrderByDescending(order => order.OrderTotal);
            break;
        default: throw new NotImplementedException();
    }

    return orders;
}
```

This change will return the sorted `orders` list back to the calling method.
