 The issue reported is related to a static class, which is a class that cannot be instantiated, or an abstract class, which can be used only as a base class. In the given code, the class `SeedRoles` is a static class, and it cannot be instantiated. The static class is a class that cannot be instantiated and cannot contain instance constructors (marked with the `static` keyword).

To resolve this issue, you can make the class non-static. This can be done by removing the `static` keyword from the class declaration. Here is the corrected code:

```cs
// TOP-MARKER
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Shop.Data.Models;
using System;
using System.Threading.Tasks;

namespace Shop.Data.Seeds
{
    public class SeedRoles
    {
        public static async Task CreateRoles(IServiceProvider serviceProvider, IConfiguration configuration)
        {
            var RoleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
            var UserManager = serviceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            string[] roleNames = { "Admin", "Customer" };
            IdentityResult roleResult;

            foreach (var roleName in roleNames)
            {
                var roleExist = await RoleManager.RoleExistsAsync(roleName);
                if (!roleExist)
                {
                    roleResult = await RoleManager.CreateAsync(new IdentityRole(roleName));
                }
            }

            var poweruser = new ApplicationUser
            {
                UserName = configuration.GetSection("UserSettings")["UserEmail"],
                Email = configuration.GetSection("UserSettings")["UserEmail"],
                ImageUrl = configuration.GetSection("UserSettings")["ImageUrl"],
                FirstName = configuration.GetSection("UserSettings")["FirstName"]
            };

            string UserPassword = configuration.GetSection("UserSettings")["UserPassword"];
            var _user = await UserManager.FindByEmailAsync(configuration.GetSection("UserSettings")["UserEmail"]);

            if (_user == null)
            {
                var createPowerUser = await UserManager.CreateAsync(poweruser, UserPassword);
                if (createPowerUser.Succeeded)
                {
                    await UserManager.AddToRoleAsync(poweruser, "Admin");
                }
            }
        }
    }
}
```

APPROVE_CHANGES
